#!/bin/bash

###############################################################
# Purpose: Automatically detect uploaded scans, copy them to  #
# Big Kahuna, and begin preprocessing.                        #
# Author: Brianne Sutton, PhD                                 #
# Date: July 2018                                             #
#                                                             #
# To add studies, expand the dirrectory and task dictionaries #
#                                                             #
###############################################################

pswd=`cat /home/brianne/.key`
tmp_mnt='/mnt/threetbrain'
sort_files='/home/brianne/tools/general_utilities/sort_files'
cron_test='no'
debug='no'
dt=`date +"%Y%m%d"`
if [[ "$cron_test" == 'yes' ]] ; then
  echo "cron test done"
else
#Create a dictionary of the directories
declare -A dir_dict
dir_dict=(["Cornier_RTO"]='rto' ["Legget_ASDX"]="asdx" ["Legget_EXO"]='exobk' ["Legget_Priming"]='priming' ["Legget_TRN"]='trn' ["Legget_AW"]='awesome' ["Legget_SALAD"]='salad' ["Legget_OBD"]='dmxba' ["Hunter_Choline"]='choline' ["Cornier_ARO"]='aging')
declare -A task_dict
task_dict=(['asdx']="{'triangle'}" ['exobk']="{'fp_run1' 'fp_run2' 'rest' }" ['priming']="{'fp_run1' 'fp_run2' 'priming'}" ['trn']="{'triangle'}" ['awesome']="{'oddball' 'fp_run1' 'fp_run2' 'rest'}" ['salad']="{'ddisc_run1' 'ddisc_run2' 'fp_run1' 'fp_run2' 'rest'}" ['eses']="{'rest'}"  ['obd']="{'ddisc_run1' 'ddisc_run2' 'fp_run1' 'fp_run2' 'rest'}" ["choline"]="{'rest'}" ['rto']="{'fp_run1' 'fp_run2' 'rest' 'ddisc_run1' 'ddisc_run2' }" ['aging']="{'fp_run1' 'fp_run2' 'rest' 'ddisc_run1' 'ddisc_run2' }")

#dir_dict=(["Bear_ESES"]='eses')
#task_dict=(['eses']="{'rest'}")

mount -t cifs -o username=mruser,password=${pswd},vers=1.0 //bic-server.ucdenver.pvt/X ${tmp_mnt}

# Limit the directories to check
if [ $# -ge 1 ]; then
  for d in ${!dir_dict[@]} ; do
    if grep -qv "$1" <<< "$d" ; then
      unset dir_dict['${d}']
    fi
  done
  echo "Edited directory array: ${dir_dict[@]}"
fi

for dk in "${!dir_dict[@]}"; do
  echo 'Checking' ${dk}
  dest_dir=`echo /data/images/${dir_dict[$dk]}`
#  rm ${dest_dir}/subj_to_proc.txt 2> /dev/null

  #Locate the files on the remote server that have been updated.
  if [ $# -eq 0 ] ; then
      files=`find ${tmp_mnt}/${dk}* -maxdepth 1 -newermt '6 months ago' -type d`
  elif [ $# -eq 2 ] ; then
  #Case for identifying a specific subject
      files=`find ${tmp_mnt}/${dk}*/*${2}* -maxdepth 1 -newermt '60 months ago' -type d`
  else
      files=`find ${tmp_mnt}/${dk}* -maxdepth 1 -newermt '60 months ago' -type d`
  fi

  for f in ${files[@]}; do
	  # Trim the directory name back to subject level to match original logic for naming conventions.
    IFS='/' read -r -a pieces <<< ${f}
    for p in ${!pieces[@]}; do
      if grep -q "$dk" <<< "${pieces[$p]}" ; then
        ix=$(($p+2))
      fi
    done
	 subj_dir=`echo ${f} | cut -d/ -f1-${ix}`
   orig=`echo ${subj_dir} | rev | cut -d/ -f1 | rev`
  echo "Processing $orig"

   if [[ "${orig}" != *"${dk}"* ]] ; then
	# The conditional is necessary to avoid copying the entire study directory
      timept=`echo ${orig} | cut -d_ -f3`
      if [[ "${debug}" == "yes" ]]; then
	        # Test that there is not a double digit number or higher for the "timept"
	        [ ${#timept} -lt 2 ] && echo "${timept} is not a double digit" || echo false
          # If there are a lot more numbers or no numbers in "timept", then this delimited field was not a timepoint and needs to be disregarded.
          [ ! -z ${timept} ] && echo "timept variable exists" || echo "timept variable does not exist"
          [ ${#timept} -gt 2 ] && echo "timept is at least double digit" || echo false
      fi

      if [[ -z "${timept}" ]] ; then
        name=`echo ${orig} | cut -d_ -f1`
        timept=`echo ${orig} | cut -d_ -f2`
      else
        name=`echo ${orig} | cut -d_ -f1-2`
      fi

      # Edge case
      if [[ -z "${name}" ]] ; then
        name=`echo ${orig}`
      fi

      rplc=`echo ${name,,} | sed -e 's,_,'',g'` # Get the lowercase prefix to combine with the timepoint

      if [[ ! -z "${timept}" && ${#timept} -lt 2 ]] ; then
        # Not all studies may have timepoints. Provide a renaming scheme for those that do
        name=${rplc}_${timept} # The timepoint needs to be added back into the name for the checks, b/c the delimited field was a timepoint
        check1=`ls -d ${dest_dir}/${name}/* 2>/dev/null | wc | awk '{print $1}'`
        ls -d ${dest_dir}/${name}/* 2>/dev/null
      else
        check1=`ls -d ${dest_dir}/${rplc}*/* 2>/dev/null | wc | awk '{print $1}'`
        ls -d ${dest_dir}/${rplc}*/* 2>/dev/null
      fi

      # Get the number of folders already matching the "new" scan name.
      # If there are matches, then copying will not be done to avoid messing with the naming scheme or overwriting already aligned or processed files.
      check2=`ls -d ${dest_dir}/${name}*/* 2>/dev/null | wc | awk '{print $1}'` # Should not be the case
      check3=`ls -d ${dest_dir}/${name^^}*/* 2>/dev/null | wc | awk '{print $1}'` # Should not be the case
      ls -d ${dest_dir}/${name}*/* 2>/dev/null
      ls -d ${dest_dir}/${name^^}*/* 2>/dev/null

      checks=$(( ${check1} + ${check2} + ${check3} ))
      if [[ "${debug}" == "yes" ]]; then
          echo "${check1}+${check2}+${check3}=${checks}"
      fi

      if [[ "${checks}" -ge 1 ]] ; then
	      echo "${subj_dir} already copied : checks x's ${checks}"
      else
	      echo "Copying ${subj_dir} to ${dest_dir}/${name} may take a while. Please be patient."
	  rsync -rzv ${f} ${dest_dir}/${name}  # Use rsync to reduce accidental re-copying.
    chmod 775 -R ${dest_dir}/${name}
	  chgrp users -R ${dest_dir}/${name}

	  echo ${name} ${dt} 'auto' >> ${dest_dir}/cron_trxfr.txt

      fi
      echo ${name} >> ${dest_dir}/subj_to_proc.txt # Send the new, lowercase name to a text file to make the next process easier.
    fi
  done
done
umount -l ${tmp_mnt}

echo "> Copying from server complete."
fi
exit
