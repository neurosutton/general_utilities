#!/bin/bash

############################################################
# sort_func_files will take the raw dicoms through initial #
# processing to make and sort standardized directories for #
# scans that have just been pulled over from the 3T server.#
#                                                          #
# For help with that process, try smbclient.               #
#                                                          #
# For first time use with a new study, one needs to edit   #
# the options/variables noted below at approx L110         #
#                                                          #
# This script uses dcm2niix to convert the dicoms. The nii #
# files are unzipped, if they match the sorting criteria,  #
# and then briefly realigned with a MATLAB function. These #
# estimates should always be verified manually.            #
#                                                          #
# Please note that there are minor modifications for the   #
# bigkahuna, b/c of how dcm2niix runs                      #
# Other servers running dcm2nii will error out, unless     #
# adapted.                                                 #
#                                                          #
# Add study names and files starting ~ln110                #
# Author: Brianne Sutton, PhD         Date: 8.3.2017       #
#
# Revision 06.2019 BMS                                     #
# Added compatibility for new drive at the BIC, including  #
# new folder naming scheme and naming conversion rules.    #
############################################################

prog=${0}
proj=${1}
subj=${2} #Bizarrely, if you enter an asterisk before the number, bash grabs the first ls instance automatically
task=${3}
skip_rename="no"
hdr=`which fslhd`
n_vols=`which fslnvols`
addpth="'/home/brianne/tools/general_utilities'" #acpc_detect is here

if [[ ${hdr} == "" ]] || [[ ${n_vols} == "" ]] ; then
  echo "Problems defining FSL path"
  exit
else
  if [[ ${1} == "" ]] ; then
    echo "Usage: ${prog} project_dir_name subject_num (optional) task (optional)"
    echo " e.g., ${prog} EXO              110.3.1                resting"
    exit
  else
    echo "Will process dcm files for study: ${proj} ${subj}"
  fi

  cd /home/data/images

  home=`pwd | sed  s/${proj}.*//` #chops to everything before project name; increases flexibility
  home=`echo ${home}/${proj}` # builds back the path to what you want

  if [[ ${2} == "" ]] ; then
    individ="*"
  else
    individ="*${subj}*"
  fi

  echo "Searching for dicom files in ${home}/${individ}"

  if [[ $(find ${home}/${individ} -name "*dcm" 2>/dev/null | head -n 2) > 0 ]] ; then
    subjs1=($(find ${home}/${individ} -name "*dcm" | rev | cut -d/ -f3- | rev | uniq))
    echo "Found ${#subjs1[@]} non-standard dcm folders"
  fi
  if [[ $(find ${home}/${individ} -name "*IMA" 2>/dev/null | head -n 2 ) > 0 ]] ; then
    subjs2=($(find ${home}/${individ} -name "*IMA" | rev | cut -d/ -f3- | rev | uniq))
    echo "Found ${#subjs2[@]} IMA folders"
  fi

  subjs=(${subjs1[@]} ${subjs2[@]})
  subjs=($(printf "%s\n" "${subjs[@]}" | sort -u)) # De-duplicates the list.

  echo "Found ${#subjs[@]} subject directories to convert"

  if [ ${#subjs[@]} == 0 ]; then
      subjs=($(find ${home}/${individ} -name "*nii*" | rev | cut -d/ -f3- | rev | uniq ))
      skip_rename="yes"
  fi

  ################# Renaming directories #######################
  for subj in "${subjs[@]}"; do
      if [[ ${skip_rename} == "no" ]] ; then
	  #subj_dir=`echo ${subj}| rev | cut -d/ -f2- | rev` #to accomodate multiple, potential directory levels
	  oldName=`echo ${subj##${home}} | cut -d/ -f2 ` # syntax to delete longest match of pattern from the beginning
	  subj_dir=`echo ${home}/${oldName}`
	  origDirName=`echo ${subj##${home}} | cut -d/ -f3- ` # need the final directory to point to dicom or another dicom containing folder, per the $subj[@]

	  if [[ $oldName == *"."* ]]; then
	      study=`echo ${oldName} | cut -d. -f1`
	      num=`echo ${oldName} | cut -d. -f2`
	      timept=`echo ${oldName} | cut -d. -f3`
	  elif [[ "$oldName" =~ [A-Z] ]]; then
	      # For folders that only have one underscore, figure out if the second field is a timepoint or subject number.
	      check_naming_type=`echo ${oldName} | cut -d_ -f3`
	      echo ${check_naming_type}
	      if [[ $#{check_naming_type} != 1 ]] ; then
		 study=`echo ${oldName} | cut -d_ -f1`
		 num=`echo ${oldName} | cut -d_ -f2`
		 timept=`echo ${oldName} | cut -d_ -f3`
	      else
		 study=`echo ${oldName} | cut -d_ -f1`
		 num=''
		 timept=`echo ${oldName} | cut -d_ -f2`
	      fi

	      if [ ! -z $timept ]; then
		  #Array
		  if [ $timept == "1" ] ; then
		      timeDict="a"
		  elif [ $timept == "2" ] ; then
		      timeDict="b"
		  elif [ $timept == "3" ] ; then
		      timeDict="c"
		  elif [ $timept == "4" ] ; then
		      timeDict="d"
		  fi
		  name=`echo ${study,,}${num}_${timept}` #The new name for the subject
	      else
		  name=`echo ${study,,}${num}` #Does not code any timepoint
	      fi

	      echo "New name is ${name,,}"
	      new_dir=${home}/${name,,}
	      echo " mv $subj_dir $new_dir"
	      mv $subj_dir $new_dir
	      subj_dir=`echo $new_dir`
	  else
	      name=`echo ${oldName}` #Loop if the subject has already been converted
	  fi
      else
	  echo "Skip rename = ${skip_rename}"
	  name=`echo ${subj##${home}} | cut -d/ -f2 ` # syntax to delete longest match of pattern from the beginning
	  subj_dir=`echo ${home}/${name,,}`
	  origDirName=`echo ${subj##${home}} | cut -d/ -f3- ` # need the final directory to point to dicom or another dicom containing folder, per the $subj[@]
      fi

    if [[ -d ${subj_dir^^} ]] || [[ -d ${subj_dir^^}/${name^^} ]] ; then
      rm -rf ${subj_dir^^}
      rm -rf ${subj_dir^^}/${name^^}
    fi
    echo ${name,,} > ${home}/tmp.txt #Useful for grabbing the output of this rename for other single-subject scripts, in lieu of an argout in bash

    #################### Processing ##########################
    echo "Working with ${subj_dir}"
    if [ ! -d ${subj_dir}/raw_dir ] ; then
      mkdir ${subj_dir}/raw_dir
    fi
    raw_dir=`echo ${subj_dir}/raw_dir`

    #Run dcm2niix if the format is still dicom
    if ls ${raw_dir}/*nii* 1> /dev/null 2>&1 ; then
      echo "Skipping dcm conversion"
    else
      dcm2niix -o ${raw_dir} -f %p_%e_%4s_%t -z y ${subj_dir}/${origDirName}  #will be zipped output for storage purposes.
      #If want to clear dicom folder or dcm files, in FUTURE editions
    fi
     echo "Cleaning up files."
      nii_check=`find ${raw_dir} -name "*nii*" | wc | awk '{print $1}'`
      if [[  ${nii_check} -gt 2 ]] && [[ ! -z ${origDirName} ]] ; then
	  echo "rm -rf ${subj_dir}/${origDirName}"
      else
	  echo "dicoms already cleaned out"
      fi
      #if [ find ${subj_dir}/dicom -name "*nii*" | wc  > 2 ] ; then
      #find ${subj_dir}/dicom -name "*dcm" | xargs rm #The list is too long to simply remove.
      #fi
    rm ${raw_dir}/AA* 1> /dev/null 2>&1 # Scout images that are unnecessary
    rm ${raw_dir}/*_MPR_* 1> /dev/null 2>&1 # extra, multi-planar reconstructions that are unnecessary

    ###################### Edit here #######################
    # Basic scheme = add the project directory name as an if statement,
    # then add the types of scans the program should try to look for in
    # the named output from dcm2nii(x)

    #Sort the gzip files
    if [ -z ${task} ] ; then
      if [ ${proj} == "exobk" ] ; then
        scan_names=("ddisc" "fp" "t1" "rest")
      elif [ ${proj} == "exw" ] ; then
        scan_names=("ddisc" "rest" "fp" "t1" "asl")
      elif [ ${proj} == "priming" ] ; then
        scan_names=("t1" "rest" "fp" "asl" "priming")
      elif [ ${proj} == "eats_shomaker" ] ; then
        scan_names=("t1" "rest" "fp")
      elif [ ${proj} == "All_Files" ] ; then #Allie's
        scan_names=("rest")
      elif [ ${proj} == "asl_testing" ]; then
        scan_names=("asl" "t1")
      elif [ ${proj} == "asdx" ] || [ ${proj} == "trn" ] ; then
        scan_names=("triangle" "t1" "rest")
      elif [ ${proj} == "ross_bch" ] ; then
        scan_names=("t1" "t2" ) #"rest")
      elif [ ${proj} == "nicotine" ] ; then
	scan_names=("t1" "rest" "craving" "asl" "rel_cbf")
      elif [ ${proj} == "awesome" ] ; then
        scan_names=( "fp" "t1" "rest")
      elif [ ${proj} == "eses" ] ; then
        scan_names=("rest" "t1")
      else
        echo "******Project directory not previously defined in the script*****"
        echo "Quiting."
        exit
      fi
    else
      scan_names=${task}
    fi
    ######################## Jump down ten lines ########################


    if [[ $scan_names == "" ]] ; then
      echo "Did not figure out which scans to process for $proj"
      echo "Quitting"
      exit
    fi
    #if [ ${proj} != "ross_bch" ] ; then
    echo "Checking: ${scan_names[@]}"
    if [[ ${#scan_names[@]} > 0 ]] ; then

      for scan_name in "${scan_names[@]}"; do
        ###############################################################
        # Might need to add here, if the study hasn't been added yet  #
        ###############################################################
        if  [[ ${scan_name} == "ddisc" ]] ; then
          findName="dis"
          nvols=189 # Length of scan corresponding to the task. Allows the script
          # to check that it is only copying complete runs.
        elif [[ ${scan_name} == "t1" ]] ; then
          findName="*mprage*"
          #findName="*SPGR*"
          nvols=1
        elif [[ ${scan_name} == "fp" ]] ; then
          findName="food"
          nvols=172
          #nvols=204
        elif [[ ${scan_name} == "rest" ]] ; then
          findName="rest"
          nvols=150 # absolute minimum of 5 minutes for potential averaging
        elif [[ "${scan_name}" == "triangle" ]] ; then
          findName="Triangle"
          nvols=336
        elif [[ "${scan_name}" == "asl" ]] ; then
          findName="tgse"
          nvols=17
        elif [[ "${scan_name}" == "rel_cbf" ]] ; then
          findName="tgse"
          nvols=1
	elif [[ "${scan_name}" == "priming" ]] ; then
	  findName="priming"
	  nvols=328
	elif [[ "${scan_name}" == "craving" ]] ; then
	  findName="craving"
	  nvols=180
        else
          findName=${scan_name}
        fi
        ######################  Quit editing  #########################

        runs=( $(find ${raw_dir} -iname "*${findName}*nii*"))
        if [[ ${#runs[@]} > 0 ]] ; then
      	  for (( j=0; ${j}<=${#runs[@]}; j++ )); do
            ndim3=`fslinfo ${runs[${j}]} | grep "dim3" | awk 'NR==1{print $2}'` # Flattened mosaics won't work and should be eliminated by checking the third dimension
	    nvols_run=`fslnvols ${runs[${j}]}` # For odd "Eq" dicom conversions. Still need to check the number of volumes later to verify that the run fits the expected criteria.
      	    if [[ ${ndim3} -lt 2 || ${nvols_run} -lt 1 || ${nvols_run} -lt ${nvols} ]] ; then
		# May need to adjust ${nvols_run} to "-ne", if there are runs with more than the required volumes AND the exact number of required volumes. As is, the run will be processed only if it is incomplete, not if there is odd extra moco or longer scan time.
               unset runs[$j]
            fi
	  done

          # Make sure that the runs are in numerical order.
	    IFS=$'\n' runs=($(sort <<<"${runs[*]}"))
	    unset IFS

          #Check for the directory
          echo ""
          echo "Found ${#runs[@]} possible runs for ${scan_name}"
          #Copy and unzip the nii

          if [[ ${#runs[@]} == 1 ]] ; then
            if ls ${subj_dir}/${scan_name}/*nii 1> /dev/null 2>&1 ; then
              echo "${subj_dir} already copied"
            else
              echo "Finding correct file to copy for ${scan_name}:"
	      mvFile=`echo ${runs[@]} | rev | cut -d/ -f1 | rev `
	      nvol_mvFile=`fslnvols ${raw_dir}/${mvFile}`
              echo "${mvFile} has ${nvol_mvFile} volumes"

              if [[ "${mvFile}" != "" ]] ; then
                echo "Match!"
                if [ ! -d ${subj_dir}/${scan_name} ] ; then
                  mkdir ${subj_dir}/${scan_name}
                fi

                mvFile=`echo ${raw_dir}/${mvFile}`
		base=`echo ${mvFile} | awk -F '.nii.gz' '{for (i=1; i<=NF; i++) printf("%s", $i)}'`
                dt=`echo ${mvFile} | rev |  cut -d. -f2- | cut -d_ -f1 | rev |cut -d. -f1| cut -c1-8`
                series=`echo ${mvFile}| rev |  cut -d. -f2- | cut -d_ -f2 | rev`
                ext=`echo ${mvFile} | rev | cut -d. -f1-2 | rev` #can be nii or nii.gz
                #macdt=`echo ${mvFile} | rev |  cut -d. -f2- | rev | cut -d_ -f1`

                cp ${mvFile} ${subj_dir}/${scan_name}/${name,,}_${scan_name}_${series}_${dt}.${ext}
		cp ${base}.json ${subj_dir}/${scan_name}
                gunzip ${subj_dir}/${scan_name}/${name,,}_${scan_name}_${series}_${dt}.${ext}
                acpc=`ls ${subj_dir}/${scan_name}/${name,,}_${scan_name}_${series}_${dt}.nii`
                echo "matlab -nosplash -nodisplay -r 'addpath($addpth); acpc_autodetect('$acpc'); quit'"
                matlab -nosplash -nodisplay -r "addpath($addpth); acpc_autodetect('$acpc'); quit"

              fi
            fi

          elif  [ ${scan_name} == "prod_asl" ] || [ ${scan_name} == "rel_cbf" ] || [ ${scan_name} == "t1" ] ; then  #For multiple runs
            if ls ${subj_dir}/${scan_name}/*nii 1> /dev/null 2>&1 ; then
              echo "${subj_dir} already copied"
            else
              echo "Finding correct file to copy for ${scan_name}:"
              if  [ ${scan_name} == "prod_asl" ] || [ ${scan_name} == "rel_cbf" ] ; then
		#  echo "Picking the last run from:"
		#  echo ${runs[@]}
                  specName=`echo ${runs[-1]}` # to find the last one
		#  echo ${specName}
              else
                echo ${runs}
                specName=`echo ${runs[0]}`
              fi

	      if [[ "${specName}" != '' ]] ; then
		  if [ ! -d ${subj_dir}/${scan_name} ] ; then
                      mkdir ${subj_dir}/${scan_name}
		  fi

		  echo $specName
		  #mac  dt=`echo ${specName} | rev |  cut -d. -f2- |cut -d/ -f1 | rev|  cut -d_ -f1`

		  dt=`echo ${specName} | rev |  cut -d. -f2- | cut -d_ -f1 | rev |cut -d. -f1| cut -c1-8`
		  ext=`echo ${specName} | rev | cut -c1-7 | rev | cut -d. -f2-` #b/c some of the images have . maddeningly sprinkled throughout
		  series=`echo ${specName}| rev |  cut -d. -f2- | cut -d_ -f2 | rev`

		  cp ${specName} ${subj_dir}/${scan_name}/${name,,}_${scan_name}_${series}_${dt}.${ext}
		  gunzip ${subj_dir}/${scan_name}/${name,,}_${scan_name}_${series}_${dt}.${ext}
		  acpc=`ls ${subj_dir}/${scan_name}/${name,,}_${scan_name}_${series}_${dt}.nii`
		  echo "matlab -nosplash -nodisplay -r 'addpath($addpth); acpc_autodetect('$acpc'); quit'"
		  matlab -nosplash -nodisplay -r "addpath($addpth); acpc_autodetect('$acpc'); quit"
	      fi
            fi
          else # if there are more than one matching run

            m=0 #initialize counter for matched runs
            for (( j=0; ${j}<=${#runs[@]}; j++ )) ; do

              mvFile=`echo ${runs[${j}]}`
              if  [[ ${mvFile} != "" ]] ; then
                #echo "Checking that ${nvols} in ${mvFile}"
                nvol_mvFile=`fslnvols ${mvFile}`
                if [[ ${nvols} -ne ${nvol_mvFile} ]] ; then
                  echo "${mvFile} has ${nvol_mvFile} volumes"
                  mvFile="" #Don't want to pull this one forward, because it doesn't have the right number of volumes (and may not be the sequence that is expected.
                  echo "Double-check that the script is looking for the correct number of volumes."
                fi

                check=`fslhd ${mvFile} | grep 'Reference' `
                if [ ! -z "$check" ] ; then
                  echo "Whoops! Found a motion reference file... scraping"
                  echo ""
                  mvFile=""
                fi

                if [[ ! -z "$mvFile" ]] ; then
                  n=$(($m+1))
                  echo "${scan_name} file ${n} is a match!"
                  if ls ${subj_dir}/${scan_name}_run${n}/*nii 1> /dev/null 2>&1 ; then
                    #ls ${subj_dir}/${scan_name}_run${n}/*nii
                    echo "${subj_dir} run${n} already copied"
                  else
                    if [ ! -d ${subj_dir}/${scan_name}_run${n} ] ; then
                      echo "Creating ${scan_name}_run${n} directory"
                      mkdir ${subj_dir}/${scan_name}_run${n}
                    fi
		    base=`echo ${mvFile} | awk -F '.nii.gz' '{for (i=1; i<=NF; i++) printf("%s", $i)}'`
                    dt=`echo ${mvFile} | rev |  cut -d. -f2- | cut -d_ -f1 | rev |cut -d. -f1| cut -c1-8`
                    series=`echo ${mvFile}| rev |  cut -d. -f2- | cut -d_ -f2 | rev`
                    ext=`echo ${mvFile} | cut -d. -f2-` #can be nii or nii.gz
                    cp ${mvFile} ${subj_dir}/${scan_name}_run${n}/${name,,}_${scan_name}run${n}_${series}_${dt}.${ext}
		    cp ${base}.json ${subj_dir}/${scan_name}_run${n}/.
                    gunzip ${subj_dir}/${scan_name}_run${n}/${name,,}_${scan_name}run${n}_${series}_${dt}.${ext}
                    acpc=`ls ${subj_dir}/${scan_name}_run${n}/${name,,}_${scan_name}run${n}_${series}_${dt}.nii`
                    matlab -nosplash -nodisplay -r "addpath($addpth); acpc_autodetect('$acpc'); quit"
                  fi
                  m=${n}
                fi
              fi
            done
          fi
        else
          echo "File for ${scan_name} does not exist"
          #rm -r ${subj_dir}/${scan_name} clean-up step
        fi
        echo "" #line break
      done
    fi
    #fi
  done
fi
exit
