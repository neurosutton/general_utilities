# -*- coding: utf-8 -*-
"""
Created on Wed Feb 13 08:44:40 2019

@author: bsutton

Wrapper for the various scripts needed for the predictive scheduling algorithm.
"""
## Import standard packages
from pathlib import Path
import os
import glob
import sys

## Import home-grown modules
sys.path.insert(0, r'path_to_scripts\python_methods')
import prep_predictive_data as pred
import model_predictive_data as model
import model_reduced_features as reduced_model

## file locations are not hard-coded... change locations here
home_dir = Path(r'path_to_data/predictiveScheduling')
dat_files = glob.glob(str(Path(home_dir,'data','historical_goLiveTo1018.csv')))

for dat in dat_files:
    dat_dir,test_filename = os.path.split(os.path.normpath(dat))
    clean_filename = 'clean_models_' + test_filename.split('.')[0] +'.pkl'

    if 'historical' in dat:
        is_historical = 'historical'
    else:
        is_historical = None
    
    # 'reduced' models have fewer features, based on initial algorithm development. The original, reduced features were validated by TPOT output.  However, the feature definitions have been re-designed since... 
    for mdl in ['models_reduced','models']:
        # Clean the data
        try:
            clean_dat = glob.glob(str(Path(dat_dir,clean_filename)))[0]
            print('Nice, new, clean data: ' + clean_filename)
        except:
            raw = pred.raw_data(dat,mdl)
            raw.clean_wrapper(is_historical)
            clean_dat = glob.glob(str(Path(dat_dir,clean_filename)))[0]
            
        # Check the model
        if 'reduced' in mdl:
            if is_historical:
                rm = reduced_model.model_data(clean_dat, model_name=mdl, test_data='X_test', test_label='y_test', is_training_data='trainingData')
            else:
                test_data=(clean_filename.split('.')[0])
                rm = reduced_model.model_data(clean_dat, model_name=mdl,test_data=test_data)
            rm.apply_wrapper(is_historical)
        else:
            if is_historical:
                mdl_dat = model.model_data(clean_dat, model_name=mdl, test_data='X_test', test_label='y_test', is_training_data='trainingData')
            else:
                test_data=(clean_filename.split('.')[0])
                mdl_dat = model.model_data(clean_dat, model_name=mdl,test_data=test_data)
            mdl_dat.apply_wrapper(is_historical)



#test_suite='yes'
#
#class predictive_wrapper:
#    def __init__(self,data_file):
#        (self.data_dir, self.filename) = os.path.split(os.path.normpath(data_file))
#        self.home_dir, data_dir_name = os.path.split(self.data_dir)  # Goes back one more level
#    
#    def __repr__(self):
#        pass
#    
#    def __str__(self):
#        pass
#    
#    def process_raw(self):
#        """Send the raw data file through prep_predictive_data to wrangle and save clean data sets"""
#    
#    def model_clean_data(self):
#        """Send the clean data through the ML models"""
#        
#        
#if test_suite=='yes':
#    home_dir = Path('path_to_data/predictiveScheduling')
#    dat = glob.glob(str(Path(home_dir,'data','historical_goLiveTo1018.csv')))
#    print(dat[0])
#    test=predictive_wrapper(dat[0])
#    test.process_raw()
    
